name: Deploy Eleventy via SSH

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - name: Create prod.env
        env:
          SECRET_KEY: ${{secrets.DJANGO_SECRET_KEY}}
          DJANGO_SUPERUSER_PASSWORD: ${{secrets.DJANGO_SUPERUSER_PASSWORD}}
          DJANGO_SUPERUSER_EMAIL: ${{secrets.DJANGO_SUPERUSER_EMAIL}}
          DJANGO_SUPERUSER_FIRSTNAME: ${{secrets.DJANGO_SUPERUSER_FIRSTNAME}}
          CSRF_TRUSTED_ORIGINS: ${{secrets.CSRF_TRUSTED_ORIGINS}}
          CORS_ALLOWED_ORIGINS: ${{secrets.CORS_ALLOWED_ORIGINS}}
          ADMIN_URL: ${{secrets.ADMIN_URL}}
        run: | 
          echo DEBUG=0 >> .env/prod.env
          echo "ALLOWED_HOSTS=192.168.1.22 backwood.online" >> .env/prod.env
          echo "DJANGO_SECRET_KEY=${{secrets.DJANGO_SECRET_KEY}}" >> .env/prod.env
          echo "DJANGO_SUPERUSER_PASSWORD=${{secrets.DJANGO_SUPERUSER_PASSWORD}}" >> .env/prod.env
          echo "DJANGO_SUPERUSER_EMAIL=${{secrets.DJANGO_SUPERUSER_EMAIL}}" >> .env/prod.env
          echo "DJANGO_SUPERUSER_FIRSTNAME=${{secrets.DJANGO_SUPERUSER_FIRSTNAME}}" >> .env/prod.env
          echo "CSRF_TRUSTED_ORIGINS=${{secrets.CSRF_TRUSTED_ORIGINS}}" >> .env/prod.env
          echo "CORS_ALLOWED_ORIGINS=${{secrets.CORS_ALLOWED_ORIGINS}}" >> .env/prod.env
          echo "ADMIN_URL=${{secrets.ADMIN_URL}}" >> .env/prod.env
          cat .env/prod.env
      - name: Create SSH key
        env: 
          SSH_HOST: ${{secrets.SSH_HOST }}
          SSH_USER: ${{secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
          SSH_REMOTE_DIR: ${{secrets.SSH_REMOTE_DIR}}
          SSH_KEY_PATH: ${{ github.workspace }}/../private.key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ../private.key
          sudo chmod 600 ../private.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          ssh -i $SSH_KEY_PATH $SSH_USER@$SSH_HOST << 'ENDSSH'
               cd $SSH_REMOTE_DIR/deployment
               docker-compose up -d --build
          ENDSSH
          
          
          
        
#       - name: Create SSH key
#         env: 
#           SSH_HOST: ${{secrets.SSH_HOST }}
#           SSH_USER: ${{secrets.SSH_USER }}
#           SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
#           SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
#           SSH_REMOTE_DIR: ${{secrets.SSH_REMOTE_DIR}}
#           SSH_KEY_PATH: ${{ github.workspace }}/../private.key
#         run: |
#           mkdir -p ~/.ssh/
#           echo "$SSH_PRIVATE_KEY" > ../private.key
#           sudo chmod 600 ../private.key
#           echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
#           scp -i $SSH_KEY_PATH -r ./.env ./deployment ./media ./requirements.txt ./src ./static $SSH_USER@$SSH_HOST:$SSH_REMOTE_DIR 
          
          
        
    
    
    
    
#       - name: Create SSH key
# scp -i $SSH_KEY_PATH -r ./* $SSH_USER@$SSH_HOST:$SSH_REMOTE_DIR
#         run: |
#           mkdir -p ~/.ssh/
#           echo "$SSH_PRIVATE_KEY" > ../private.key
#           sudo chmod 600 ../private.key
#           echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
#           ssh -i $SSH_KEY_PATH $SSH_USER@$SSH_HOST "cd backwood/deployment && docker-compose down && docker system prune --all --force && docker-compose up -d --build"
#           mkdir test
#           ls -la
#         shell: bash
#         env:
#           SSH_HOST: ${{secrets.SSH_HOST }}
#           SSH_USER: ${{secrets.SSH_USER }}
#           SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
#           SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
#           SSH_KEY_PATH: ${{ github.workspace }}/../private.key
